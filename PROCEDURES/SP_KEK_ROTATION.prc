CREATE OR REPLACE PROCEDURE VMSCMS.SP_KEK_ROTATION(PRM_CUR_KEK_INDEX IN VARCHAR2,
								    PRM_NEW_KEK_INDEX IN VARCHAR2,
								    PRM_OUT_MSG       OUT VARCHAR2) IS

   /*************************************************
      * Created Date     :  20/03/2012
      * Created By       :  T.Narayanaswamy
      * PURPOSE          :  For Key Rotation
      * Reviewer         :  Saravanakumar
      * Reviewed Date    :  20-Apr-2012
      * Build Number     : CMS3.5.1_RI0008_B00022
  *************************************************/
  V_ERR_MSG      VARCHAR2(500);
  V_HSM_REQ_CMD  VARCHAR2(200);
  V_HSM_PORT     VARCHAR2(100);
  V_HSM_IP       VARCHAR2(100);
  V_CLEAR_DEK    RAW(2000);
  V_KEYTYPE      VARCHAR2(100) := '00A';
  V_DEK_LENGTH   NUMBER;
  V_HEXVALUE     VARCHAR2(10);
  V_DEK_INDEX    VARCHAR2(200);
  V_CUR_ENCR_DEK VARCHAR2(200);
  V_CUR_ENCR_KEK VARCHAR2(200);
  V_NEW_ENCR_DEK VARCHAR2(200);
  V_RAISE_EXCEPTION EXCEPTION;
  V_NEW_ENCR_KEK VARCHAR2(200);
  CURSOR C_SELECT_ENCR_DEK IS
    SELECT CDK_ENCRYPTED_DEK, CDK_DEK_INDEX
	 FROM CMS_DEK_KEY_DETAIL
	WHERE CDK_KEK_INDEX = PRM_CUR_KEK_INDEX;

BEGIN
  V_ERR_MSG := 'OK';

  BEGIN
    SELECT CKK_ENCRYPTED_KEK
	 INTO V_CUR_ENCR_KEK
	 FROM CMS_KEK_KEY_DETAIL
	WHERE CKK_KEK_INDEX = PRM_CUR_KEK_INDEX;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
	 V_ERR_MSG   := 'INVALID KEK KEY INDEX';
	 PRM_OUT_MSG := V_ERR_MSG;
	 RAISE V_RAISE_EXCEPTION;
  END;

  BEGIN
    SELECT CKK_ENCRYPTED_KEK
	 INTO V_NEW_ENCR_KEK
	 FROM CMS_KEK_KEY_DETAIL
	WHERE CKK_KEK_INDEX = PRM_NEW_KEK_INDEX;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
	 V_ERR_MSG   := 'INVALID KEK KEY INDEX';
	 PRM_OUT_MSG := V_ERR_MSG;
	 RAISE V_RAISE_EXCEPTION;
  END;

  BEGIN
    SELECT HSM_IP_NUMBER, HSM_PORT_NUMBER
	 INTO V_HSM_IP, V_HSM_PORT
	 FROM HSM_SERVER_MASTER
	WHERE HSM_NUMBER IN (SELECT HCM_NUMBER
					   FROM HSM_CONFIG_MASTER
					  WHERE HSM_PROCESS = 'ENCRYPT') AND
		 HSM_NUMBER = 1;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
	 V_ERR_MSG   := 'HSM DETAILS NOT AVAILABLE';
	 PRM_OUT_MSG := V_ERR_MSG;
	 RAISE V_RAISE_EXCEPTION;
  END;

  BEGIN
    OPEN C_SELECT_ENCR_DEK;
    LOOP
	 FETCH C_SELECT_ENCR_DEK
	   INTO V_CUR_ENCR_DEK, V_DEK_INDEX;
	 EXIT WHEN C_SELECT_ENCR_DEK%NOTFOUND;
	 SELECT LENGTH(V_CUR_ENCR_DEK) INTO V_DEK_LENGTH FROM DUAL;
	 SELECT DECODE(LENGTH(FN_DEC2HEX(V_DEK_LENGTH)),
				1,
				'000' || FN_DEC2HEX(V_DEK_LENGTH),
				2,
				'00' || FN_DEC2HEX(V_DEK_LENGTH),
				3,
				'0' || FN_DEC2HEX(V_DEK_LENGTH),
				FN_DEC2HEX(V_DEK_LENGTH))
	   INTO V_HEXVALUE
	   FROM DUAL;
	 V_HSM_REQ_CMD := '1234M20012' || V_KEYTYPE || V_CUR_ENCR_KEK ||
				   V_HEXVALUE || V_CUR_ENCR_DEK;
	 V_CLEAR_DEK   := KEYACCESS_HSM.DECRYPTDEK(V_HSM_REQ_CMD,
									   V_HSM_IP,
									   V_HSM_PORT,
									   'M3');
	 SELECT LENGTH(V_CLEAR_DEK) INTO V_DEK_LENGTH FROM DUAL;
	 SELECT DECODE(LENGTH(FN_DEC2HEX(V_DEK_LENGTH)),
				1,
				'000' || FN_DEC2HEX(V_DEK_LENGTH),
				2,
				'00' || FN_DEC2HEX(V_DEK_LENGTH),
				3,
				'0' || FN_DEC2HEX(V_DEK_LENGTH),
				FN_DEC2HEX(V_DEK_LENGTH))
	   INTO V_HEXVALUE
	   FROM DUAL;

	 V_HSM_REQ_CMD  := '1234M00021' || V_KEYTYPE || V_NEW_ENCR_KEK ||
				    V_HEXVALUE || V_CLEAR_DEK;
	 V_NEW_ENCR_DEK := KEYACCESS_HSM.ENCRYPTDEK(V_HSM_REQ_CMD,
									    V_HSM_IP,
									    V_HSM_PORT,
									    'M1');
	 BEGIN
	   UPDATE CMS_DEK_KEY_DETAIL
		 SET CDK_ENCRYPTED_DEK = V_NEW_ENCR_DEK,
			CDK_KEK_INDEX     = PRM_NEW_KEK_INDEX,
			CDK_LUPD_USER     = 1,
			CDK_LUPD_DATE     = SYSDATE
	    WHERE CDK_INST_CODE = 1 AND CDK_DEK_INDEX = V_DEK_INDEX;
	   IF (SQL%ROWCOUNT < 1) THEN
		V_ERR_MSG := 'DEK KEY ROTATION NOT UPDATED';
		RAISE V_RAISE_EXCEPTION;
	   END IF;
	 END;

    END LOOP;
    CLOSE C_SELECT_ENCR_DEK;
  END;
  COMMIT;
  PRM_OUT_MSG := V_ERR_MSG;
EXCEPTION
  WHEN V_RAISE_EXCEPTION THEN
    V_ERR_MSG   := 'EXCEPTION : ' || V_ERR_MSG || ' ' || SQLERRM;
    PRM_OUT_MSG := V_ERR_MSG;
    ROLLBACK;
  WHEN OTHERS THEN
    V_ERR_MSG   := ' EXCEPTION WHEN DEK ENCRPTION PROCESS :' || V_ERR_MSG || ' ' ||
			    SQLERRM;
    PRM_OUT_MSG := V_ERR_MSG;
    ROLLBACK;
END;
/


