CREATE OR REPLACE PROCEDURE VMSCMS.SP_TRANSLOG_TO_PANTRANS(P_INST_CODE IN NUMBER,
										  P_LUPDUSER  IN NUMBER,
										  P_ERRMSG    OUT VARCHAR2) AS
  CURSOR CUR_TRANS IS
    SELECT MSGTYPE,
		 RRN,
		 DELIVERY_CHANNEL,
		 TERMINAL_ID,
		 DATE_TIME,
		 TXN_CODE,
		 TXN_TYPE,
		 TXN_MODE,
		 TXN_STATUS,
		 RESPONSE_CODE,
		 BUSINESS_DATE,
		 BUSINESS_TIME,
		 CUSTOMER_CARD_NO,
		 TOPUP_CARD_NO,
		 TOPUP_ACCT_NO,
		 TOPUP_ACCT_TYPE,
		 BANK_CODE,
		 TOTAL_AMOUNT,
		 RULE_INDICATOR,
		 RULEGROUPID,
		 MCCODE,
		 CURRENCYCODE,
		 ADDCHARGE,
		 PRODUCTID,
		 CATEGORYID,
		 TIPS,
		 DECLINE_RULEID,
		 ATM_NAME_LOCATION,
		 AUTH_ID,
		 TRANS_DESC,
		 AMOUNT,
		 PREAUTHAMOUNT,
		 PARTIALAMOUNT,
		 MCCODEGROUPID,
		 CURRENCYCODEGROUPID,
		 TRANSCODEGROUPID,
		 RULES,
		 PREAUTH_DATE,
		 CR_DR_FLAG,
		 PROCESSES_FLAG,
		 TRANSACTIONLOG,
		 GL_UPD_FLAG,
		 GL_EOD_FLAG,
		 SYSTEM_TRACE_AUDIT_NO,
		 INSTCODE,
		 FEECODE,
		 FEEATTACHTYPE,
		 TRANFEE_AMT,
		 SERVICETAX_AMT,
		 CESS_AMT,
		 TRANFEE_CR_ACCTNO,
		 TRANFEE_DR_ACCTNO,
		 TRAN_ST_CALC_FLAG,
		 TRAN_CESS_CALC_FLAG,
		 TRAN_ST_CR_ACCTNO,
		 TRAN_ST_DR_ACCTNO,
		 TRAN_CESS_CR_ACCTNO,
		 TRAN_CESS_DR_ACCTNO,
		 TRAN_REVERSE_FLAG,
		 ADD_LUPD_DATE,
		 ADD_LUPD_USER,
		 ADD_INS_DATE,
		 ADD_INS_USER,
		 TRAN_CURR,
		 CUSTOMER_ACCT_NO
	 FROM TRANSACTIONLOG
	WHERE INSTCODE = P_INST_CODE AND TXN_STATUS = 'C' AND
		 RESPONSE_CODE = '00' AND PAN_TRANS_FLAG = 'Y' AND
		 LENGTH(CUSTOMER_CARD_NO) > 20
	  FOR UPDATE;

  V_ERRMSG    VARCHAR2(300);
  V_SAVEPOINT NUMBER DEFAULT 0;
  EXP_REJECT_RECORD EXCEPTION;
BEGIN
  SAVEPOINT V_SAVEPOINT;
  P_ERRMSG := 'OK';
  V_ERRMSG := 'OK';

  FOR I IN CUR_TRANS LOOP

    BEGIN
	 INSERT INTO CMS_PAN_TRANS
	   (CPT_INST_CODE,
	    CPT_ID_COL,
	    CPT_AUTH_CODE,
	    CPT_ARN_CODE,
	    CPT_MESG_TYPE,
	    CPT_TRANS_TYPE,
	    CPT_TRANS_CODE,
	    CPT_REC_TYP,
	    CPT_TRANS_DATE,
	    CPT_TRANS_TIME,
	    CPT_TRANS_AMT,
	    CPT_ACQ_BANK,
	    CPT_TERM_ID,
	    CPT_MCC_CODE,
	    CPT_MERC_ID,
	    CPT_PAN_CODE,
	    CPT_MBR_NUMB,
	    CPT_ACCT_NO,
	    CPT_ADDON_STAT,
	    CPT_ADDON_LINK,
	    CPT_MBR_LINK,
	    CPT_PROD_CODE,
	    CPT_CARD_TYPE,
	    CPT_CUST_CODE,
	    CPT_CUST_CATG,
	    CPT_LOYL_CALC,
	    CPT_LOYL_CALCDATE,
	    CPT_INS_USER,
	    CPT_INS_DATE,
	    CPT_LUPD_USER,
	    CPT_LUPD_DATE,
	    CPT_CARD_CURR)
	 VALUES
	   (P_INST_CODE,
	    TO_CHAR(SYSDATE, 'YYYY') || LPAD(SEQ_PAN_TRANS.NEXTVAL, 10, 0),
	    I.AUTH_ID,
	    NULL,
	    I.MSGTYPE,
	    I.TXN_TYPE,
	    I.TXN_CODE,
	    I.DELIVERY_CHANNEL, --rac_type is deliverychannel.
	    TO_DATE(I.BUSINESS_DATE, 'YYMMDD'),
	    FN_CONV_CHAR_TO_DATE(I.BUSINESS_DATE, I.BUSINESS_TIME),
	    --i.business_time,
	    I.AMOUNT,
	    NULL,
	    I.TERMINAL_ID,
	    TRIM(I.MCCODE),
	    NULL,
	    I.CUSTOMER_CARD_NO,
	    '000',
	    I.CUSTOMER_ACCT_NO,
	    NULL,
	    NULL, --in place of card number account number should be pass
	    NULL,
	    I.PRODUCTID,
	    I.CATEGORYID,
	    NULL,
	    NULL,
	    'N',
	    NULL,
	    P_LUPDUSER,
	    SYSDATE,
	    P_LUPDUSER,
	    SYSDATE,
	    I.TRAN_CURR);

	 IF SQL%ROWCOUNT = 0 THEN
	   V_ERRMSG := 'Error While inserting record in pan trans ' || SQLERRM;
	   RAISE EXP_REJECT_RECORD;
	 END IF;
    EXCEPTION
	 WHEN EXP_REJECT_RECORD THEN
	   RAISE;
	 WHEN OTHERS THEN
	   V_ERRMSG := 'Error While inserting record in pan trans ' || SQLERRM;
	   RAISE EXP_REJECT_RECORD;
    END;

    BEGIN
	 UPDATE TRANSACTIONLOG
	    SET PAN_TRANS_FLAG = 'N'
	  WHERE CURRENT OF CUR_TRANS;

	 IF SQL%ROWCOUNT = 0 THEN
	   V_ERRMSG := 'Error While updating record in transactionlog ' ||
				SQLERRM;
	   RAISE EXP_REJECT_RECORD;
	 END IF;

    EXCEPTION
	 WHEN EXP_REJECT_RECORD THEN
	   V_ERRMSG := 'Error While updating record in transactionlog';
	   RAISE;
	 WHEN OTHERS THEN
	   V_ERRMSG := 'Error While updating record in transactionlog ' ||
				SQLERRM;
	   RAISE EXP_REJECT_RECORD;
    END;
    V_SAVEPOINT := V_SAVEPOINT + 1;
  END LOOP;

EXCEPTION
  WHEN EXP_REJECT_RECORD THEN
    ROLLBACK TO V_SAVEPOINT;
    P_ERRMSG := 'Error Msg ' || V_ERRMSG;
  WHEN OTHERS THEN
    ROLLBACK TO V_SAVEPOINT;
    P_ERRMSG := 'Error Msg ' || V_ERRMSG || SQLERRM;
END;
/


